/** * com.upyun.api * Upload.java */package com.kaikeba.common.upyun;import com.kaikeba.common.upyun.utils.UpYunException;import com.kaikeba.common.util.DibitsHttpClient;import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;import org.apache.commons.httpclient.Header;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.HttpStatus;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.methods.multipart.FilePart;import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;import org.apache.commons.httpclient.methods.multipart.Part;import org.apache.commons.httpclient.methods.multipart.StringPart;import org.apache.commons.httpclient.params.HttpMethodParams;import org.json.JSONObject;import java.io.File;import java.util.ArrayList;import java.util.List;/** * Upload.java * * @author vincent chen * @since 2012 Jun 18, 2012 4:52:49 PM */public class Uploader {    /**     * 上传文件到又拍云存储。 目前根据android系统版本的不同，只支持小文件上传。     *     * @param policy     * @param signature     * @param bucket     * @param sourceFile     * @return     * @throws UpYunException     */    public static String upload(String policy, String signature, String bucket, String sourceFile)            throws UpYunException {        String returnStr = null;        if (bucket == null || bucket.equals("")) {            throw new UpYunException(10, "bucket can not be empty.");        }        if (sourceFile == null || sourceFile.equals("")) {            throw new UpYunException(11, "source file can not be empty.");        }        if (policy == null || policy.equals("")) {            throw new UpYunException(12, "policy can not be empty.");        }        if (signature == null || signature.equals("")) {            throw new UpYunException(13, "signature can not be empty.");        }        HttpClient httpclient = new HttpClient();        PostMethod postMethod = new PostMethod("http://v0.api.upyun.com/" + bucket + "/");        postMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,                new DefaultHttpMethodRetryHandler());        List<Header> headers = new ArrayList<Header>();//        headers.add(new Header("Accept", "application/json"));        headers.add(new Header("Request", "multipart/form-data"));        try {            Part[] parts = {new StringPart("policy", policy),                    new StringPart("signature", signature),                    new FilePart("file", new File(sourceFile))};            postMethod.setRequestEntity(new MultipartRequestEntity(parts, postMethod.getParams()));            httpclient.getHostConfiguration().getParams().setParameter("http.default-headers", headers);            int code = httpclient.executeMethod(postMethod);            String str = DibitsHttpClient.getMethodResponseText(postMethod);            if (code != HttpStatus.SC_OK) {                JSONObject obj = new JSONObject(str);                String msg = obj.getString("message");                msg = new String(msg.getBytes("UTF-8"), "UTF-8");                String url = obj.getString("url");                long time = obj.getLong("time");                boolean isSigned = false;                String signString = "";                if (!obj.isNull("sign")) {                    signString = obj.getString("sign");                    isSigned = true;                } else if (!obj.isNull("non-sign")) {                    signString = obj.getString("non-sign");                    isSigned = false;                }                UpYunException exception = new UpYunException(code, msg);                exception.isSigned = isSigned;                exception.url = url;                exception.time = time;                exception.signString = signString;                throw exception;            } else {                JSONObject obj = new JSONObject(str);                returnStr = obj.getString("url");            }        } catch (Exception e) {            e.printStackTrace();        }//		} catch (ClientProtocolException e) {//			e.printStackTrace();//			throw new UpYunException(30, e.getMessage());//		} catch (IOException e) {//			e.printStackTrace();//			throw new UpYunException(31, e.getMessage());//		} catch (OutOfMemoryError e) {//			e.printStackTrace();//			throw new UpYunException(33, e.getMessage());//		} catch (JSONException e) {//			throw new UpYunException(32, e.getMessage());//		}        return returnStr;    }}